{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Neural Network -- Criteria","provenance":[{"file_id":"1ydwyqW7XdT_-YJcBuCLGhf_QWpvcB0Rr","timestamp":1611855085846}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"CMTPAf7MCEe-"},"source":["This notebook uses a baseline feed forward neural network and back propogation to find the function that maps from an artwork to which exhibition it belongs to. \r\n","\r\n","For example, we can input one datapoint into the neural network and obtain a output vector [.1, .5, .3, .1], which means the art piece corresponding to the data point has .1 probability of belonging to exhibition #1, .5 to #2, etc. \r\n","\r\n","We can use this output vector as a metric to measure the similarity between different artwork -- two art peice are likely to belong to the same exhibition categories if they share similarities.\r\n","\r\n","\r\n","#### Notes \r\n","Since the dataset size is small, and simple and small network should be able to fit the dimension of the data. This justify the choice of a feed forward network.\r\n","\r\n","Supervised learning finds relationship based on previous data, so we won't be able to find new groupings for existing artwork that is used for training, but we can group unseen artworks using the same relation. That is the function of the neural network. \r\n","\r\n","\r\n","#### Some Intuition \r\n","Since there are 400 more exhibitions, and each exhibition usually contains less than 50 artpieces, **there is little data for the neural network to generalize about the pattern in each exhibition**. \r\n","\r\n","\r\n","\r\n"]},{"cell_type":"code","metadata":{"id":"auQhqsWlghmi","executionInfo":{"status":"ok","timestamp":1613491311942,"user_tz":420,"elapsed":14789,"user":{"displayName":"Nate Turley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjUmEpxXogJdrZqLXNSGy0F1KWfS3f3Bp40GV2NYQ=s64","userId":"13338033513677370855"}}},"source":["from google.colab import auth\r\n","auth.authenticate_user()\r\n","import gspread\r\n","from oauth2client.client import GoogleCredentials\r\n","import numpy as np\r\n","import pandas as pd\r\n","\r\n","# open data from google sheet\r\n","gc = gspread.authorize(GoogleCredentials.get_application_default())\r\n","wb = gc.open_by_key(\"1Fr1y3l9pDmSZ1cJWrzVMgKjWpgWy03yclnN7p3_4slw\")\r\n","worksheet = wb.worksheet(\"NN_Data_2\")\r\n","worksheet_type = wb.worksheet(\"NN_Data_type\")"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"Fkt-L-VAg66g","executionInfo":{"status":"ok","timestamp":1613491312744,"user_tz":420,"elapsed":15586,"user":{"displayName":"Nate Turley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjUmEpxXogJdrZqLXNSGy0F1KWfS3f3Bp40GV2NYQ=s64","userId":"13338033513677370855"}}},"source":["# open sheet as panda dataframe \r\n","df_type = pd.DataFrame(worksheet_type.get_all_records())\r\n","df = pd.DataFrame(worksheet.get_all_records())\r\n","\r\n","# Meaningful columns\r\n","# r\tartist_name\tclassification\tMedium\tno_of_components creation_date with_collector editioned ex_id width_mm\theight_mm num_exhibitions\texhibition_location\ttime_exhibited\tartist_birthplace_lat\tartist_birthplace_lon\r\n","#\taccession_year\tage_when_acquired\t\r\n","\r\n","# Meaningless columns or columns that correlates with other columns \r\n","columns_to_drop = [\"Medium\", \"has_comments\", \"addl_artist_info\",\t\"has_commentary\",\t\"has_location\",\t\"has_object_description\",\t\"has_installation_instructions\"]\r\n","\r\n","# drop these columns\r\n","df = df.drop(columns=columns_to_drop, axis=1)\r\n","df_type = df_type.drop(columns=columns_to_drop, axis=1)"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"6dupGso-AeVo","executionInfo":{"status":"ok","timestamp":1613491313408,"user_tz":420,"elapsed":16248,"user":{"displayName":"Nate Turley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjUmEpxXogJdrZqLXNSGy0F1KWfS3f3Bp40GV2NYQ=s64","userId":"13338033513677370855"}}},"source":["label_encoders = {} \r\n","str_cols = []\r\n","\r\n","from sklearn import preprocessing\r\n","\r\n","# find the columns that are strings. Covert them into categorical integers with LabelEncoder\r\n","for typ in df_type.columns:\r\n","  if df_type.iloc[0][typ] == \"string\":\r\n","    le = preprocessing.LabelEncoder()\r\n","    df[typ]=df[typ].astype(\"str\").str.replace(',','')\r\n","    le.fit(df[typ]) # entire column \r\n","    label_encoders[typ] = le\r\n","    df[typ] = le.transform(df[typ])\r\n","  else: \r\n","    df[typ] = pd.to_numeric(df[typ])"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"KfHSgPefSdH4","executionInfo":{"status":"ok","timestamp":1613491313409,"user_tz":420,"elapsed":16246,"user":{"displayName":"Nate Turley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjUmEpxXogJdrZqLXNSGy0F1KWfS3f3Bp40GV2NYQ=s64","userId":"13338033513677370855"}}},"source":["# prepare training and testing data for the ML model \r\n","df_train = df.dropna(subset=[\"ex_id\"])\r\n","df_no = df[df[\"ex_id\"].isnull()]\r\n","df_no = df_no.fillna(0)\r\n","df_train = df_train.fillna(0)\r\n","\r\n","from sklearn.model_selection import train_test_split\r\n","\r\n","train_data = df_train.drop([\"ex_id\"], axis=1).astype(\"float64\") #train_test_split(df_train.drop([\"ex_id\"], axis=1).astype(\"float64\"),  test_size=0.2)\r\n","train_label= df_train[\"ex_id\"] # train_test_split(df_train[\"ex_id\"],  test_size=0.2)\r\n","\r\n","not_exhibited_data = df_no.drop([\"ex_id\"], axis=1).astype(\"float64\")\r\n","not_exhibited_label = df_no[\"ex_id\"]"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"NijvG6DtKe7y","executionInfo":{"status":"ok","timestamp":1613491314685,"user_tz":420,"elapsed":17521,"user":{"displayName":"Nate Turley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjUmEpxXogJdrZqLXNSGy0F1KWfS3f3Bp40GV2NYQ=s64","userId":"13338033513677370855"}}},"source":["# preprocess the dataset \r\n","import tensorflow as tf\r\n","from sklearn.preprocessing import MinMaxScaler\r\n","\r\n","X = train_data\r\n","Y = train_label\r\n","\r\n","# Normalize features within range 0 (minimum) and 1 (maximum)\r\n","scaler = MinMaxScaler(feature_range=(0, 1))\r\n","X = scaler.fit_transform(X)\r\n","X = pd.DataFrame(X)\r\n","\r\n","X = X.values\r\n","Y = Y.values"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"lYQZoO2Kdf2_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613491315103,"user_tz":420,"elapsed":17932,"user":{"displayName":"Nate Turley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjUmEpxXogJdrZqLXNSGy0F1KWfS3f3Bp40GV2NYQ=s64","userId":"13338033513677370855"}},"outputId":"28490d26-f759-4097-a1e6-328d2a9537f0"},"source":["from keras.models import Sequential\r\n","from keras.layers import Dense\r\n","from keras.wrappers.scikit_learn import KerasClassifier\r\n","from sklearn.model_selection import cross_val_score\r\n","from sklearn.model_selection import KFold\r\n","from sklearn.preprocessing import MinMaxScaler\r\n","import matplotlib.pyplot as plt\r\n","from sklearn.ensemble import RandomForestClassifier\r\n","# Now setup the machine learning model \r\n","\r\n","n_exhibitions = 434\r\n","\r\n","model = Sequential([\r\n","  Dense(32, activation='relu', input_shape = (X.shape[1],) ),\r\n","  Dense(32, activation='relu'),\r\n","  Dense(n_exhibitions, activation='softmax'),\r\n","])\r\n","\r\n","model.compile(\r\n","  optimizer='adam',\r\n","  loss='categorical_crossentropy',\r\n","  metrics=['accuracy'],\r\n",")\r\n","\r\n","model.summary()"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense (Dense)                (None, 32)                576       \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 32)                1056      \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 434)               14322     \n","=================================================================\n","Total params: 15,954\n","Trainable params: 15,954\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5lLxFUUPbTFg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613491321035,"user_tz":420,"elapsed":23858,"user":{"displayName":"Nate Turley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjUmEpxXogJdrZqLXNSGy0F1KWfS3f3Bp40GV2NYQ=s64","userId":"13338033513677370855"}},"outputId":"4a3e469a-902f-4d5e-c5ee-8544a038f962"},"source":["from tensorflow.keras.utils import to_categorical\r\n","\r\n","# use early stopping to avoid overfitting\r\n","# callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)\r\n","\r\n","# now train the neural network \r\n","history = model.fit(\r\n","  x = X, # training data\r\n","  y = to_categorical(Y), # training targets\r\n","  epochs= 20,\r\n","  batch_size=16,\r\n","  # validation_split=0.1,\r\n","  # callbacks=[callback]\r\n",")"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","228/228 [==============================] - 1s 1ms/step - loss: 5.4381 - accuracy: 0.0639\n","Epoch 2/20\n","228/228 [==============================] - 0s 1ms/step - loss: 4.5242 - accuracy: 0.0820\n","Epoch 3/20\n","228/228 [==============================] - 0s 1ms/step - loss: 4.4703 - accuracy: 0.0902\n","Epoch 4/20\n","228/228 [==============================] - 0s 1ms/step - loss: 4.2863 - accuracy: 0.0982\n","Epoch 5/20\n","228/228 [==============================] - 0s 1ms/step - loss: 4.1748 - accuracy: 0.1038\n","Epoch 6/20\n","228/228 [==============================] - 0s 1ms/step - loss: 4.0946 - accuracy: 0.1073\n","Epoch 7/20\n","228/228 [==============================] - 0s 1ms/step - loss: 4.0450 - accuracy: 0.1044\n","Epoch 8/20\n","228/228 [==============================] - 0s 1ms/step - loss: 3.9996 - accuracy: 0.1015\n","Epoch 9/20\n","228/228 [==============================] - 0s 1ms/step - loss: 3.9339 - accuracy: 0.1119\n","Epoch 10/20\n","228/228 [==============================] - 0s 1ms/step - loss: 3.9001 - accuracy: 0.1118\n","Epoch 11/20\n","228/228 [==============================] - 0s 1ms/step - loss: 3.8174 - accuracy: 0.1169\n","Epoch 12/20\n","228/228 [==============================] - 0s 1ms/step - loss: 3.8300 - accuracy: 0.1129\n","Epoch 13/20\n","228/228 [==============================] - 0s 1ms/step - loss: 3.8032 - accuracy: 0.1001\n","Epoch 14/20\n","228/228 [==============================] - 0s 1ms/step - loss: 3.7515 - accuracy: 0.1047\n","Epoch 15/20\n","228/228 [==============================] - 0s 1ms/step - loss: 3.6958 - accuracy: 0.1093\n","Epoch 16/20\n","228/228 [==============================] - 0s 1ms/step - loss: 3.6578 - accuracy: 0.1174\n","Epoch 17/20\n","228/228 [==============================] - 0s 1ms/step - loss: 3.5879 - accuracy: 0.1338\n","Epoch 18/20\n","228/228 [==============================] - 0s 1ms/step - loss: 3.6018 - accuracy: 0.1117\n","Epoch 19/20\n","228/228 [==============================] - 0s 1ms/step - loss: 3.5722 - accuracy: 0.1234\n","Epoch 20/20\n","228/228 [==============================] - 0s 1ms/step - loss: 3.5599 - accuracy: 0.1229\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"id":"0TmIvkJ9WAtl","executionInfo":{"status":"ok","timestamp":1613491321232,"user_tz":420,"elapsed":24047,"user":{"displayName":"Nate Turley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjUmEpxXogJdrZqLXNSGy0F1KWfS3f3Bp40GV2NYQ=s64","userId":"13338033513677370855"}},"outputId":"c4fce6a6-b8a1-434f-b92c-45f77f1b469b"},"source":["# plot the learning\r\n","plt.plot(history.history['accuracy'])\r\n","plt.title('model accuracy')\r\n","plt.ylabel('accuracy')\r\n","plt.xlabel('epoch')\r\n","plt.legend(['train', 'test'], loc='upper left')\r\n","plt.show()\r\n","\r\n","# summarize history for loss\r\n","plt.plot(history.history['loss'])\r\n","plt.title('model loss')\r\n","plt.ylabel('loss')\r\n","plt.xlabel('epoch')\r\n","plt.legend(['train', 'test'], loc='upper left')\r\n","plt.show()"],"execution_count":8,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"uZ_gIA4SYoD3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613491321372,"user_tz":420,"elapsed":24184,"user":{"displayName":"Nate Turley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjUmEpxXogJdrZqLXNSGy0F1KWfS3f3Bp40GV2NYQ=s64","userId":"13338033513677370855"}},"outputId":"36ff4e63-87e7-4b6d-c2ab-55a111414b98"},"source":["results = model.predict(not_exhibited_data.values)\r\n","print(results)\r\n","# results is the probability distribution of artworks over all past exhibitions "],"execution_count":9,"outputs":[{"output_type":"stream","text":["[[0. 0. 0. ... 0. 0. 0.]\n"," [0. 0. 0. ... 0. 0. 0.]\n"," [0. 0. 0. ... 0. 0. 0.]\n"," ...\n"," [0. 0. 0. ... 0. 0. 0.]\n"," [0. 0. 0. ... 0. 0. 0.]\n"," [0. 0. 0. ... 0. 0. 0.]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vdOUipaNizoU","executionInfo":{"status":"ok","timestamp":1613491321373,"user_tz":420,"elapsed":24179,"user":{"displayName":"Nate Turley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjUmEpxXogJdrZqLXNSGy0F1KWfS3f3Bp40GV2NYQ=s64","userId":"13338033513677370855"}}},"source":["# find the most likely exbition for each art work that has never been exhibited\r\n","most_likely_exhibition = np.argmax(results, axis=1)"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7ZLtVCTcObYj"},"source":["Reference: \r\n","\r\n","1.  [Visualize High Dimensional Data](https://www.kaggle.com/minc33/isualizing-high-dimensional-clusters)\r\n","2.   List item\r\n","\r\n","\r\n","\r\n"]},{"cell_type":"code","metadata":{"id":"7pwpzBD6cmJ6","executionInfo":{"status":"ok","timestamp":1613491321373,"user_tz":420,"elapsed":24176,"user":{"displayName":"Nate Turley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjUmEpxXogJdrZqLXNSGy0F1KWfS3f3Bp40GV2NYQ=s64","userId":"13338033513677370855"}}},"source":["df = not_exhibited_data\r\n","\r\n","# find the columns that are strings. Covert them into categorical integers with LabelEncoder\r\n","for typ in df_type.columns:\r\n","  if df_type.iloc[0][typ] == \"string\":\r\n","    df[typ] = label_encoders[typ].inverse_transform(df[typ].astype(\"int64\"))"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"ff-qGpXaf-CJ","executionInfo":{"status":"ok","timestamp":1613491321374,"user_tz":420,"elapsed":24175,"user":{"displayName":"Nate Turley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjUmEpxXogJdrZqLXNSGy0F1KWfS3f3Bp40GV2NYQ=s64","userId":"13338033513677370855"}}},"source":["df[\"most_likely_exhibition\"] = most_likely_exhibition"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CyXl7mBOlDFY","executionInfo":{"status":"ok","timestamp":1613491321375,"user_tz":420,"elapsed":24170,"user":{"displayName":"Nate Turley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjUmEpxXogJdrZqLXNSGy0F1KWfS3f3Bp40GV2NYQ=s64","userId":"13338033513677370855"}},"outputId":"ff46182c-d29d-4e7e-b371-1ca7b53ccc53"},"source":["# The machine learning only classifies into four categories\r\n","df[\"most_likely_exhibition\"].unique() "],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([396, 319, 331, 372, 364, 433, 421])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"P7UQ539TmgqM"},"source":["Using the results: \r\n","\r\n","\r\n","1) The Dataframe \"df in the last cell is straightforward to understand, the column of \"most_likely_exhibition\" is the predicted past exhibition that gives the highest probability for each artwork. There are only 4 exhibitions that all these artworks are predicted to belong to. This likely means that the neural network cannot generalize information from the dataset. \r\n","\r\n","2) The \"results\" is a numpy array containing the probability distribution of the 2000+ artworks over the 400+ past exhibitions. We can use this as a high dimensional vector to measure how each artwork are similar to each other.  \r\n","\r\n","\r\n","\r\n","\r\n","\r\n"]},{"cell_type":"code","metadata":{"id":"DJ1Rrx98txl9","executionInfo":{"status":"ok","timestamp":1613491321375,"user_tz":420,"elapsed":24164,"user":{"displayName":"Nate Turley","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjUmEpxXogJdrZqLXNSGy0F1KWfS3f3Bp40GV2NYQ=s64","userId":"13338033513677370855"}}},"source":[""],"execution_count":13,"outputs":[]}]}